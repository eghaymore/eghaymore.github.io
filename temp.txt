import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

public class ArrayListSorter {

	private static int insertionThreshold = 120;
	
	/**
	 * driver method for mergesort. checks for a properly sized array, and makes the requried conditions
	 * to execute mergsort.
	 */
	public static &ltT extends Comparable&lt? super T&gt&gt void mergesort(ArrayList&ltT&gt arr) {
		if(arr == null || arr.size() &lt= 0)
			return;
		
		ArrayList&ltT&gt temp = new ArrayList&ltT&gt(arr.size());
		
		for(int i=0; i&ltarr.size(); i++)
			temp.add(null);
		
		if(arr.size() &lt= insertionThreshold)
			insertionSort(arr, 0, arr.size()-1);
		else
			mergesortRecursive(arr, temp, 0, arr.size()-1);
	}
	
	/**
	 * sort an array &ltT&gt using mergesort
	 * 
	 * @param arr the array being sorted
	 * @param temp temporary storage filled with null values, created from the driver
	 * @param start the first index where the sort starts
	 * @param end the final index where the sort ends
	 * @return the sorted array
	 */
	private static &ltT extends Comparable&lt? super T&gt&gt ArrayList&ltT&gt mergesortRecursive(ArrayList&ltT&gt arr, ArrayList&ltT&gt temp, int start, int end) {
		if(end-start &lt= insertionThreshold)
			return insertionSort(arr, start, end);
		
		int mid = start + (end-start)/2;
		
		mergesortRecursive(arr, temp, start, mid);
		mergesortRecursive(arr, temp, mid+1, end);
		return merge(arr, temp, start, mid, end);
	}
	
	/**
	 * merges the two halves of an array
	 * 
	 * @param arr the array being sorted 
	 * @param temp array(arr) with sorted halves
	 * @param start the first index of arr
	 * @param mid the middle index of arr
	 * @param end the final index of arr
	 * @return arr fully sorted
	 */
	private static &ltT extends Comparable&lt? super T&gt&gt ArrayList&ltT&gt merge(ArrayList&ltT&gt arr, ArrayList&ltT&gt temp, int start, int mid, int end) {		
		int i = start;
		int j = mid+1; 
		int mergePos = start;
		
		while(i &lt= mid && j &lt= end) {
			if(arr.get(i).compareTo(arr.get(j)) &lt= 0) {  // if i &lt= j, set pos = i
				temp.set(mergePos, arr.get(i));
				i++;
			}
			else {
				temp.set(mergePos, arr.get(j)); // else set pos = j
				j++;
			}
			mergePos++;
		}
		
		while(i &lt= mid) {
			temp.set(mergePos, arr.get(i)); // add the rest left over from left half
			i++;
			mergePos++;
		}
		
		while(j &lt= end) {
			temp.set(mergePos, arr.get(j)); // add the rest left over from the right half
			j++;
			mergePos++;
		}
			
		for(int a=0; a&ltarr.size() && temp.get(a)!=null; a++) 
			arr.set(a, temp.get(a)); // copy temp into array
		
		return arr;
	}
	
	/**
	 * swaps two values in an array
	 * 
	 * @param arr the array whose items are being swapped
	 * @param x swaps positions with y
	 * @param y swaps positions with x
	 */
	private static &ltT&gt void swap (ArrayList&ltT&gt arr, int x, int y) {
	        T temp = arr.get(x);
	        arr.set(x, arr.get(y));
	        arr.set(y, temp);
	}

	/**
	 * helper method for quicksort. generates a pivot based off the median of 3 random items in the array.
	 * 
	 * @param arr the array whose items the pivot is chosen from
	 * @param lb the left bound of items within the array the pivot can be chosen from
	 * @param rb the right bound of items within the array the pivot can be chosen from
	 * @return
	 */
	private static &ltT extends Comparable&lt? super T&gt&gt int getMedianPivot(ArrayList&ltT&gt arr,int lb,int rb) {
		Random rand = new Random();
		
		// generate 3 random items and store their indexes 
		int r1pos = rand.ints(lb, rb).findFirst().getAsInt(); 
		T r1 = arr.get(r1pos);
				
		int r2pos = rand.ints(lb, rb).findFirst().getAsInt();
		T r2 = arr.get(r2pos);
				
		int r3pos = rand.ints(lb, rb).findFirst().getAsInt();
		T r3 = arr.get(r3pos);
		
		ArrayList&ltT&gt randArr = new ArrayList&ltT&gt(3); 
			
		randArr.add(r3);
		randArr.add(r2); // add the random items to an array
		randArr.add(r1);
		
		insertionSort(randArr, 0, randArr.size()-1); // sort the items
			
		if(randArr.get(1).equals(r1)) 
			return r1pos;
		else if(randArr.get(1).equals(r2)) // return the index of whichever item is at index 1 in randArr
			return r2pos;
		else
			return r3pos;
		}
		
	/**
	 * helper method for quicksort. generates a pivot based off the middle item in an array
	 * 
	 * @param arr the array whose items are being chosen from
	 * @param lb the left bound of items within the array the pivot can be chosen from
	 * @param rb the right bound of items within the array the pivot can be chosen from
	 * @return
	 */
	private static &ltT&gt int getMiddlePivot(ArrayList&ltT&gt arr,int lb,int rb) {
		if((rb-lb)/2 &gt lb) // find and return the middle item  
			return (rb-lb)/2;
		else
			return lb; // check that the middle item isn't outside of the bounds, and if it is, return lb
	}
		
	/**
	 * helper method for quicksort. get a pivot based off a random item in an array
	 * 
	 * @param arr the array whose items are being chosen from
	 * @param lb the left bound of items within the array the pivot can be chosen from
	 * @param rb the right bound of items within the array the pivot can be chosen from
	 * @return
	 */
	private static &ltT&gt int getRandomPivot(ArrayList&ltT&gt arr,int lb,int rb) {
		Random rand = new Random();
			
		return rand.ints(lb, rb).findFirst().getAsInt();
	}
		
	/**
	 * driver method for quicksort. checks to make sure the array to be sorted isn't null or empty
	 * then executes quicksort on that array.
	 */
	public static &ltT extends Comparable&lt? super T&gt&gt void quicksort(ArrayList&ltT&gt arr) {
		//check for empty or null array
	    if (arr == null || arr.size() &lt= 0)
	        return;
	    
	    if(arr.size() &lt= insertionThreshold)
			insertionSort(arr, 0, arr.size()-1);
	       
		quicksortRecursive(arr,0,arr.size()-1);
	}
	
	/**
	 * sorts an array &ltT&gt using quicksort
	 * 
	 * @param arr the array being sorted
	 * @param low the low bound of array to be sorted
	 * @param high the high bound of array to be sorted
	 */
	public static &ltT extends Comparable&lt? super T&gt&gt void quicksortRecursive(ArrayList&ltT&gt arr, int low, int high) {
		//control for insertionsort
		if(high-low &lt= insertionThreshold) {
			insertionSort(arr, low, high);
			return; 
		}
		if(high-low &lt 1)
			return;
				// different pivots to try
		int pivot = getMedianPivot(arr,low,high);
		// int pivot = getRandomPivot(arr,low,high);
		// int pivot = getMiddlePivot(arr,low,high);
			
		T temp = arr.get(pivot);
			
		// make left &lt pivot and right &gt pivot
	    int i = low, j = high;
	    swap(arr,pivot,high);      
	    j--;
	        
	    while (i &lt= j) {
	    	if(i==0 && j==0)
	    		break;
	        //Check until all values on left side of pivot are&ltpivot
	        while (arr.get(i).compareTo(temp)&lt=0&&i &lt= j) {
	            i++;
	        }
	           
	        //Check until all values on right side of pivot are &gt pivot
	        while (arr.get(j).compareTo(temp)&gt=0&&i &lt= j) {
	        	if (j==0)
	            	break;
	            j--;
	        }
	        //Check items on each side of the pivot, swap if needed
	        //After swapping move the index on each side forward
	        if (arr.get(i).compareTo(arr.get(j)) &gt0&&i &lt= j) {
	            swap (arr, i, j);
	            i++;
	            if (j==0)
	        		break;
	            j--;
	        }
	    }
	    swap(arr,i,high);
	    
	    //Recursive calls to quicksort
	    if (low &lt j) {
	        quicksortRecursive(arr, low, j);
	    }
	    
	    if (high &gt i) {
	        quicksortRecursive(arr,i+1, high);
	    }
	}

	/**
	 * generates an array with values of 1 up to size 
	 * 
	 * @param size the size of the generated array and max value of any item in array
	 * @return an array with size size whose items are ascending in value
	 */
	public static ArrayList&ltInteger&gt generateAscending(int size) {
		ArrayList&ltInteger&gt arr = new ArrayList&ltInteger&gt(size);
		
		if(size &lt 0)
			throw new IllegalArgumentException();
		
		for(int i=1; i&lt=size; i++)
			arr.add(i);
		
		return arr;
	}
	
	/**
	 * generates an array with permuted values of 1 up to size
	 * 
	 * @param size the size of the generated array and max value of any item in array
	 * @return an array with size size whose items are shuffled
	 */
	public static ArrayList&ltInteger&gt generatePermuted(int size) {
		ArrayList&ltInteger&gt arr = new ArrayList&ltInteger&gt(size);
		
		if(size &lt 0)
			throw new IllegalArgumentException();
		
		for(int i=1; i&lt=size; i++)
			arr.add(i);
		
		Collections.shuffle(arr);
		
		return arr;
	}
	
	/**
	 * generates an array with descending values of size down to 1
	 * 
	 * @param size the size of the generated array and max value of any item in array
	 * @return an array with size size whose items are descending in value
	 */
	public static ArrayList&ltInteger&gt generateDescending(int size) {
		ArrayList&ltInteger&gt arr = new ArrayList&ltInteger&gt(size);
		
		if(size &lt 0)
			throw new IllegalArgumentException();
		
		for(int i=size; i&gt=1; i--)
			arr.add(i);
		
		return arr;
	}
	
	/**
	 * sorts an array using insertionsort
	 * 
	 * @param a the array being sorted
	 * @param left the left bound of the array to be sorted
	 * @param right the right bound of the array to be sorted
	 * @return array a sorted from left bound to right bound
	 */
	public static &ltT extends Comparable&lt? super T&gt&gt ArrayList&ltT&gt insertionSort(ArrayList&ltT&gt a, int left, int right) {
		T key;
		
		for(int i = left+1; i &lt= right; i++) { // i is length of the string
			key = a.get(i); // store the item on the right that's being compared
			int j = i-1; // item to the left
			
			while(j &gt= left && a.get(j).compareTo(key) &gt 0) { // compare the right with the item to the left
				a.set(j+1, a.get(j)); // swap the left item with the position
				j--;
			}
			a.set(j+1, key); // place the item back in place of a duplicate (if it reaches the first element, j=-1, so j+1 = 0
		}
		return a;
	}
	
}

